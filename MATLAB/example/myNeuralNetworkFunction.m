function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 26-Sep-2017 14:31:57.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0.00463422413406744;
x1_step1.gain = 2.01714473683379;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 0.457546892419602;
x2_step1.gain = 1.42508284962891;
x2_step1.ymin = -1;

% Layer 1
b1 = [1.0430368246670016497;2.675488359442595776;1.4006995299618500983;0.85540833501472746114;-0.29110901660953025782;0.081491245217043678517;-0.45744030213128894502;-1.0432522243899196024;-0.98887992956104264763;-2.5529568265690820716];
IW1_1 = [0.056670192857134503439 0.79281007277939319344;-1.2896622168637850159 -0.64586692470494000418;-0.37396668946442374049 -1.1664516611039521532;-0.51718978317006014667 -0.17156905712405756681;0.43875812279342107924 0.12257908758410479555;-0.20702909290244975171 -0.9238899360932957272;-0.63905330850334352011 -0.16829659329967058823;-0.51578337967501286521 -0.10314170348589903059;-0.45896674366324669014 1.0533879873725751075;-1.8804959038799586857 -0.57142730930725560423];
IW1_2 = [-0.91177608281967292836 -0.27520560475660454935;0.52140803526989998318 -0.680220501072054895;1.2640707925332450579 0.23377192165648807975;0.032905682330901249444 -0.18886932407095621822;-0.043399323433298685193 0.24250981244046188046;1.0236802124216977106 0.24287419307755403475;-0.027411796913832667949 -0.22334694220151110611;-0.0071588329285902788449 -0.28069136059571969666;2.0942357787574761296 1.0758555978481803006;-0.023257227257515944441 -0.62893237238109145348];

% Layer 2
b2 = 0.15256203746755658823;
LW2_1 = [-0.19454202437301321149 -0.07837570680346028773 0.12996832647720052423 -0.72729094618354295232 0.62811525050403305137 0.12232109213750913534 -0.29842040624539600824 -0.68664859342662631914 9.2088358528431762609e-07 -0.023932894956557523858];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.42508284962891;
y1_step1.xoffset = 0.457546892419602;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
