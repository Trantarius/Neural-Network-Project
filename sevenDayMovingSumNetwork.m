function [Y,Xf,Af] = sevenDayMovingSumNetwork(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
%made with bayesian regularization
%each day is a sum of the sales from the last seven days
%trained on the first 600 days
%
% Generated by Neural Network Toolbox function genFunction, 02-Jan-2018 14:57:57.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%
%   Xi = 1x7 cell 1, initial 7 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%
%   Ai = 2x0 cell 2, initial 7 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 1x7 cell 1, final 7 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 29838.44;
x1_step1.gain = 3.4182664295985e-05;
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.21004378575196466783;0.05780485581938694245;-0.3482908173849927902;-0.38894196161258121069;2.3173929509558339745;1.4914953827373029771;-0.82411234497452168224;1.1046795484055356162;0.92757939535381583873;0.19524218036064028281];
IW1_1 = [-1.5302618334671203026 -0.19784347242397515299 0.32038873701561082497 0.21093074448891194206 -0.18121590387462238603 1.9566025270850635476 -0.78749295423834997365;-0.78286221500941888252 0.8831296277480372714 0.36908036972334617998 1.03404293526301716 -1.3889315984148751237 -0.39402411170370171822 0.43600117755359513172;1.1610596816332787728 0.26657235860280797946 -1.0190598835963782243 -0.13674086111551608802 -0.34630711791593782323 0.077511657398304276145 -0.72825485890910790499;-1.816267405935411583 0.057542760110779057892 -0.60324200779810299711 -0.54805442056366693304 0.84539612917324225005 0.70992471493293052287 -1.5597522636058909207;-3.8148405443200195108 1.6280495668018024613 0.25060596675677387912 1.5248224031264465683 0.30621635458533347229 -1.3732374789223067424 2.1630003156596613323;-5.0442317956105515719 0.96266285005615903625 1.1762079174895154754 1.3468878714697132271 0.12005154305308322893 -0.60070839106529483331 1.407607010971975825;-3.2924344226627120236 0.48411190512402979547 -0.21309142734828045995 0.28660842855855328537 0.53183009465773878333 1.3346995904135652289 -2.3179152863547547447;-0.37585150085550911303 0.25199115133687605139 -1.2964900542909525427 -0.95616246869081000792 -0.37056746757713537876 -0.17259118706575005131 1.4860522097448709555;1.1176931913777461425 -0.093286550960875125327 -0.2078145880088156372 -0.75399001186840552968 0.48225444264167627306 -1.477481951842493535 1.9036338038025464314;-0.38155538516688658479 -0.69900514001654279195 0.85922353824513564291 0.3732425782255807678 1.1627725052913941983 0.17120197863852884557 -1.3102395442263956582];

% Layer 2
b2 = 0.13753225911398103687;
LW2_1 = [1.8409120021347771257 1.4688618610951165167 1.9673990244034911257 2.6072035146427339214 -2.5196080649286898279 1.4929625088937270583 -1.7350356371749098283 -1.6163331708236614581 2.4222461785194346895 1.481485539620855052];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.4182664295985e-05;
y1_step1.xoffset = 29838.44;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,8);
for ts=1:7
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+6,8)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5 6 7]-1,8)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 7);
xits = finalxts(finalxts<=7);
xts = finalxts(finalxts>7)-7;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
